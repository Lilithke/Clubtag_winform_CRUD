// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Clubtag_winform_CRUD;
//
//    var tagsag = Tagsag.FromJson(jsonString);
using System;
using System.Collections.Generic;

using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Clubtag_winform_CRUD
{


    public partial class Tagsag
    {
        [JsonProperty("id")]
        public long TagsagId { get; set; }

        [JsonProperty("entry", NullValueHandling = NullValueHandling.Ignore)]
        public string TagsagEntry { get; set; }

        [JsonProperty("rating", NullValueHandling = NullValueHandling.Ignore)]
        public long? TagsagRating { get; set; }

        [JsonProperty("fullname", NullValueHandling = NullValueHandling.Ignore)]
        public string TagsagFullname { get; set; }

        [JsonProperty("interest", NullValueHandling = NullValueHandling.Ignore)]
        public string TagsagInterest { get; set; }

        public override string ToString()
        {
            return this.TagsagFullname;
        }
    }

    public partial class Tagsag
    {
        public static List<Tagsag> FromJson(string json) => JsonConvert.DeserializeObject<List<Tagsag>>(json, Clubtag_winform_CRUD.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<Tagsag> self) => JsonConvert.SerializeObject(self, Clubtag_winform_CRUD.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
